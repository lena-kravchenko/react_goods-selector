{"version":3,"sources":["App.js","index.js"],"names":["goodsFromServer","map","name","index","id","isResetted","App","state","selectedGood","selectGood","setState","resetSelection","products","this","singleProduct","length","join","className","type","onClick","event","good","key","includes","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sOAGMA,G,MAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UACAC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACtBD,OACAE,GAAID,EAAQ,OAGVE,GAAa,EA0FFC,E,4MAvFbC,MAAQ,CACNC,aAAc,CAAC,Q,EAGjBC,WAAa,YAAe,IAAZP,EAAW,EAAXA,KACd,EAAKQ,UAAS,SAAAH,GAAK,MAAK,CACtBC,aAAa,GAAD,mBAAMD,EAAMC,cAAZ,CAA0BN,QAGxCG,GAAa,G,EAGfM,eAAiB,WACf,EAAKD,UAAS,SAAAH,GAAK,MAAK,CACtBC,aAAc,OAGhBH,GAAa,G,4CAGf,WAAU,IAGJO,EAHG,OACCJ,EAAiBK,KAAKN,MAAtBC,aACFM,EAAyC,IAAxBN,EAAaO,OAWpC,OAPEH,EADEJ,IAAiBH,EACRS,EAAa,UACjBN,EADiB,0BAEjBA,EAAaQ,KAAK,MAFD,iBAIb,GAIX,6BACE,wBAAIC,UAAU,SACXL,EAASG,OACNH,EACA,qBAGN,4BACEM,KAAK,SACLD,UACET,EAAaO,OACT,GACA,WAENI,QAAS,SAACC,GACR,EAAKT,mBART,KAaA,wBAAIM,UAAU,QACXjB,EAAgBC,KAAI,SAAAoB,GAAI,OACvB,wBACEC,IAAKD,EAAKjB,GACVa,UACET,GAAgBA,EAAae,SAASF,EAAKnB,MACvC,WACA,IAGLmB,EAAKnB,KACL,IACD,4BACEgB,KAAK,SACLC,QAAS,SAACC,GACR,EAAKX,WAAWY,IAElBJ,UACET,GAAgBA,EAAae,SAASF,EAAKnB,MACvC,WACA,IARR,oB,GAnEIsB,IAAMC,WCjBxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.72676a81.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n].map((name, index) => ({\n  name,\n  id: index + 1,\n}));\n\nlet isResetted = false;\n\nclass App extends React.Component {\n  state = {\n    selectedGood: ['Jam'],\n  };\n\n  selectGood = ({ name }) => {\n    this.setState(state => ({\n      selectedGood: [...state.selectedGood, name],\n    }));\n\n    isResetted = false;\n  }\n\n  resetSelection = () => {\n    this.setState(state => ({\n      selectedGood: [],\n    }));\n\n    isResetted = true;\n  }\n\n  render() {\n    const { selectedGood } = this.state;\n    const singleProduct = (selectedGood.length === 1);\n    let products;\n\n    if (selectedGood && !isResetted) {\n      products = singleProduct\n        ? `${selectedGood} is selected`\n        : `${selectedGood.join(', ')} are selected`;\n    } else {\n      products = [];\n    }\n\n    return (\n      <div>\n        <h1 className=\"title\">\n          {products.length\n            ? products\n            : 'No goods selected'\n          }\n        </h1>\n        <button\n          type=\"button\"\n          className={\n            selectedGood.length\n              ? ''\n              : 'disabled'\n          }\n          onClick={(event) => {\n            this.resetSelection();\n          }}\n        >\n          X\n        </button>\n        <ul className=\"list\">\n          {goodsFromServer.map(good => (\n            <li\n              key={good.id}\n              className={\n                selectedGood && selectedGood.includes(good.name)\n                  ? 'selected'\n                  : ''\n              }\n            >\n              {good.name}\n              {' '}\n              <button\n                type=\"button\"\n                onClick={(event) => {\n                  this.selectGood(good);\n                }}\n                className={\n                  selectedGood && selectedGood.includes(good.name)\n                    ? 'disabled'\n                    : ''\n                }\n              >\n                Select\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}